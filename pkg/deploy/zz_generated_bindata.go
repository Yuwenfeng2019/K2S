// Code generated by go-bindata.
// sources:
// manifests/coredns.yaml
// manifests/traefik.yaml
// DO NOT EDIT!

package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _corednsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6e\x1b\xb7\x12\xbe\xd7\x53\x10\x7b\x90\xbb\xb3\xb2\x04\x23\x39\x3e\xbc\x4b\x24\x37\x35\x90\xb8\x82\x65\xe7\xa6\x28\x82\x11\x77\x24\xb1\xe6\x72\x58\x72\x56\xb1\x9a\xe6\xdd\x0b\xee\x9f\xb9\xf2\x3a\x48\x82\xec\xcd\x92\x1c\xce\x37\xe4\xfc\x7c\x43\x70\xfa\x03\xfa\xa0\xc9\x4a\x71\x98\x4f\xee\xb5\x2d\xa4\x58\xa3\x3f\x68\x85\xaf\x95\xa2\xca\xf2\xa4\x44\x86\x02\x18\xe4\x44\x08\x0b\x25\x4a\xa1\xc8\x63\x61\x43\x3b\x0f\x0e\x14\x4a\x71\x5f\x6d\x30\x0f\xc7\xc0\x58\x4e\xf2\x3c\x9f\xa4\xd0\x7e\x03\x6a\x0a\x15\xef\xc9\xeb\xbf\x81\x35\xd9\xe9\xfd\x45\x98\x6a\x3a\x3b\xcc\x37\xc8\xd0\x59\x5e\x98\x2a\x30\xfa\x1b\x32\x38\x30\x6b\x60\x83\x26\xc4\x91\xa8\xed\x78\x8b\x8c\xb5\xfe\x86\x88\x03\x7b\x70\x4e\xdb\x5d\x63\x28\x2f\x70\x0b\x95\xe1\xd0\x9f\xb7\x39\x95\xec\x8e\xed\x2b\x83\x41\x4e\x72\x01\x4e\xbf\xf5\x54\xb9\x1a\x39\x17\x59\x36\x11\xc2\x63\xa0\xca\x2b\x6c\xd7\xd0\x16\x8e\xb4\xad\xc1\x72\x11\x1a\xcf\x34\x13\x47\x45\x33\xe8\x9d\x10\xa7\x07\xf4\x9b\x56\xd7\xe8\xc0\xf5\xe0\x13\xb0\xda\x7f\x9b\x3d\x4b\xc5\x29\xcc\x0e\xf9\x67\x38\xf4\x8d\xb6\x85\xb6\xbb\x81\x5f\xc1\x5a\xe2\x5a\xbd\x75\xee\x18\xee\xc0\xdf\x50\x31\x55\xae\x00\x46\x29\x32\xf6\x15\x66\x3f\x3f\x3c\x64\xf0\x06\xb7\xf5\xf9\x5a\x87\x7d\xe5\xc2\x13\x21\x9e\xe6\xce\x33\xc8\xa1\xda\xfc\x89\x8a\xeb\xd8\x8f\xa6\xfa\x0f\x27\x78\x5f\x3b\x0b\xb2\x5b\xbd\x7b\x0f\xee\x47\xca\xa6\xdb\xbe\x20\x8f\x5b\x6d\x50\x8a\x7f\x6a\x9f\x4e\xe5\xcb\x73\xf1\xb9\x1e\xc6\x0f\xbd\x27\x1f\xfa\xe9\x1e\xc1\xf0\xbe\x9f\x3e\x06\x40\xa8\xc6\x25\x53\x43\x0a\x8c\xd0\x36\x87\xa2\xf0\x53\xf0\x0e\x84\x76\xaf\x9a\xc1\x23\xac\xa8\x33\x5a\x68\x1b\x50\x55\x1e\x93\xf5\xca\x05\xf6\x08\x65\xb2\xb4\x05\x63\x78\xef\xa9\xda\xed\xc7\x81\xfb\xbd\x5f\xfa\x91\xf3\x54\x22\xef\xb1\x0a\x42\xfe\x7f\xfe\xf2\x3c\x15\x3c\x1c\xc5\x54\x9c\x21\xab\xb3\x58\x10\xe6\x30\x55\x64\xb7\xfd\x06\x05\x6a\x8f\xe2\x7c\xd6\x2f\x18\x22\xd7\x4f\x3c\x1a\x82\x22\x91\x41\xb1\x01\x03\x56\x35\x77\xf8\xf2\x24\x5a\xf8\xc0\x68\xe3\x30\x9c\x94\xcb\x12\x9d\xa1\x63\x89\x3f\xc6\x7a\x27\x85\x70\x11\x72\x70\xae\xdd\xd2\x28\x9e\x96\x47\x03\x9c\xc5\x78\x2f\xaf\xd7\xd9\x24\x38\x54\x51\xfb\x3f\x1e\x9d\xd1\x0a\x82\x14\xf3\x89\x10\xb1\x82\x18\x77\xc7\x06\x98\x8f\x0e\xa5\xb8\x21\x63\xb4\xdd\xdd\xd5\xb5\xd8\xd4\x6e\xba\x22\x5b\x77\x94\xf0\x70\x67\xe1\x00\xda\xc0\x26\x26\x54\x0d\x87\x06\x15\x93\x6f\xf6\x94\x91\x9c\xde\x25\x07\x1f\x3f\x3a\x63\xe9\x4c\x0f\x9c\x7a\xa7\xf6\xf9\x40\xff\xb9\xcb\x77\xd7\xab\xc7\x83\xca\xbb\x3e\xf1\x70\x7d\x4f\x32\xe8\x53\x72\x8a\x5f\x2e\xee\xf1\x18\x5d\xe6\x35\x6b\x05\xe6\x75\x51\x90\x0d\xbf\x59\x73\xcc\x92\xec\x24\x17\x35\xc9\x4b\x91\x5d\x3e\xe8\xc0\xa1\x13\x46\x7a\x5d\x0f\xae\x1f\xbf\x98\x02\x27\x3c\x47\x41\x0a\xa3\x6d\xf5\xd0\x6e\x52\x64\x19\xb4\x45\xdf\x9f\x25\x7f\x92\x16\xcd\xa7\x4b\xd8\x3d\x2e\x9f\xb5\x7f\x39\x9f\x9e\x4f\x67\xc3\x4d\xab\xca\x98\x15\x19\xad\x8e\x52\x5c\x6d\xaf\x89\x57\x1e\x03\xd6\x34\xd4\x25\x76\xd2\x1b\xfa\xf4\xd6\xa5\xe6\xc1\x4a\x0c\x47\x49\xfe\x28\xc5\xfc\x7f\xb3\xf7\x3a\x91\x78\xfc\xab\xc2\x70\xba\x5b\xb9\x4a\x8a\xf9\x6c\x56\x8e\x62\x0c\x20\xc0\xef\x82\x14\xbf\x8b\x2c\x8f\xf5\x98\xfd\x57\x64\x75\x8d\x76\x97\xeb\x88\x2a\x13\x7f\xf4\x2a\x07\x32\x55\x89\xef\x63\x54\x07\x71\xeb\xbc\x15\xf9\x31\x6f\x36\x25\xf6\xcb\xb8\x7f\x05\xbc\x97\x22\xb5\x30\xb8\x0b\x14\x31\xce\x52\xc4\xb6\xf3\xc8\x1d\xe4\x87\x76\xfa\x48\xad\xc8\xb3\x14\x09\xcd\x74\x85\x3c\xc4\x75\x9e\x98\x14\x19\x29\xee\x96\xab\xef\xc5\xc9\x59\xb9\x51\xac\xdb\xc5\x57\xb0\x06\xe4\xd7\xa1\x95\xc8\x5e\xab\xf1\x93\xa5\x68\x35\x3b\x6b\x3e\x2e\xc8\x32\x3e\x70\x1a\x5a\x30\x86\x3e\xad\xbc\x3e\x68\x83\x3b\xbc\x0c\x0a\x4c\x5d\x3f\x32\xd2\x75\x48\xdd\xad\xc0\xc1\x46\x1b\xcd\x1a\x4f\x92\x03\x8a\x62\xb8\x90\x8b\xeb\xcb\xdb\x8f\x6f\xae\xae\x97\x1f\xd7\x97\x37\x1f\xae\x16\x97\x03\x71\xe1\xc9\x9d\x2a\x80\x31\x23\x81\xbb\x21\xe2\x5f\xb4\xc1\xb6\x29\x0f\xc3\x68\xf4\x01\x2d\x86\xb0\xf2\xb4\xc1\x14\x6f\xcf\xec\xde\x22\x0f\x4d\xb8\x26\x51\x4e\x3a\x9f\x68\xd3\x41\x8a\x8b\xd9\xc5\x6c\xb0\x1c\xd4\x1e\xa3\x93\x7f\xbd\xbd\x5d\x25\x02\x6d\x35\x6b\x30\x4b\x34\x70\x5c\xa3\x22\x5b\x04\x29\x5e\xa5\xaa\xac\x4b\xa4\x8a\x7b\xe1\xcb\x44\x16\x2a\xa5\x30\x84\xdb\xbd\xc7\xb0\x27\x53\x34\xec\xda\x7d\x5b\xd0\xa6\xf2\x98\x48\x3b\xdd\xc2\x86\xae\xec\x97\xcd\x5b\xa8\x15\x34\x55\xf1\x1d\x55\xa3\xba\xd7\xc6\xd0\x3d\xe3\xc4\x54\x5f\x98\xb1\x0c\xa7\xe1\xaa\x19\xb5\x2b\xe5\x81\xac\xf3\x74\x2f\x7c\xf6\xdd\xd3\x3e\xa4\x46\xda\x66\xd2\x01\x9e\xed\x9b\x4f\xde\xa1\x8f\x4f\x85\x48\xc6\x4d\x50\xb3\x58\x36\xd9\x88\x38\x28\x0f\xee\xd9\xf7\xe8\x37\xb4\xe1\xf6\x9d\x94\xb7\x3d\x29\x41\xfa\xd6\x86\x3d\x6c\xa9\x63\x36\x5b\x1b\x57\x2b\x29\x5e\x7c\x5e\xbc\xbb\x5b\xdf\x5e\xde\x7c\x5c\x5e\xaf\xbf\xbc\x98\x24\x24\x96\x9f\x50\x94\x4b\xb9\xe7\x94\xa9\xf2\x11\x1e\x7a\x46\xa1\x21\x90\x7c\x84\x6a\xdc\x90\x91\x86\x2a\xff\x06\x00\x00\xff\xff\xb5\xed\x36\x67\x1f\x0e\x00\x00")

func corednsYamlBytes() ([]byte, error) {
	return bindataRead(
		_corednsYaml,
		"coredns.yaml",
	)
}

func corednsYaml() (*asset, error) {
	bytes, err := corednsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefikYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\x4d\x4b\xc4\x30\x10\xc6\xf1\x7b\x3e\xc5\xb0\xb0\xc7\x4d\x5c\x14\x0f\x73\x53\x29\x28\x82\x88\x6f\x57\x99\xa6\xa3\x0d\x79\x69\xc8\x4c\x05\x15\xbf\xbb\xb4\xf4\xb6\xc7\x99\xe7\xcf\x8f\x6a\x78\xe3\x26\x61\x2a\x08\xf1\x5c\xac\x27\xd5\xc4\x36\x4c\xee\xeb\x68\x62\x28\x03\xc2\x2d\xa7\x7c\x33\x52\x53\x93\x59\x69\x20\x25\x34\x00\x85\x32\x23\x68\x23\xfe\x08\x71\xbb\xa5\x92\x67\x84\x38\xf7\x7c\x90\x6f\x51\xce\x46\x2a\xfb\x25\xf7\x0b\x80\x30\xaa\x56\x41\xe7\xf6\xbf\xf7\xaf\xd7\xdd\xd3\x43\xf7\xd2\x3d\xbf\x5f\x3d\xde\xfd\xed\x9d\x28\x69\xf0\x6e\x0d\xc5\x6d\xf0\xe1\x68\x2f\x2f\xec\x99\xd5\xcf\x1f\x03\x20\xac\x8b\x05\xd0\x7a\xf2\x96\x0b\xf5\x89\x07\x84\x9d\xb6\x99\x77\xeb\x20\x92\x4e\xfe\xff\x01\x00\x00\xff\xff\xf0\x93\x36\xe7\xe3\x00\x00\x00")

func traefikYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefikYaml,
		"traefik.yaml",
	)
}

func traefikYaml() (*asset, error) {
	bytes, err := traefikYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"coredns.yaml": corednsYaml,
	"traefik.yaml": traefikYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"coredns.yaml": &bintree{corednsYaml, map[string]*bintree{}},
	"traefik.yaml": &bintree{traefikYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
