/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/rancher/k3s/pkg/apis/k3s.cattle.io/v1"
	clientset "github.com/rancher/k3s/pkg/generated/clientset/versioned/typed/k3s.cattle.io/v1"
	informers "github.com/rancher/k3s/pkg/generated/informers/externalversions/k3s.cattle.io/v1"
	listers "github.com/rancher/k3s/pkg/generated/listers/k3s.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type ListenerConfigHandler func(string, *v1.ListenerConfig) (*v1.ListenerConfig, error)

type ListenerConfigController interface {
	ListenerConfigClient

	OnChange(ctx context.Context, name string, sync ListenerConfigHandler)
	OnRemove(ctx context.Context, name string, sync ListenerConfigHandler)
	Enqueue(namespace, name string)

	Cache() ListenerConfigCache

	Informer() cache.SharedIndexInformer
	GroupVersionKind() schema.GroupVersionKind

	AddGenericHandler(ctx context.Context, name string, handler generic.Handler)
	AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler)
	Updater() generic.Updater
}

type ListenerConfigClient interface {
	Create(*v1.ListenerConfig) (*v1.ListenerConfig, error)
	Update(*v1.ListenerConfig) (*v1.ListenerConfig, error)
	UpdateStatus(*v1.ListenerConfig) (*v1.ListenerConfig, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.ListenerConfig, error)
	List(namespace string, opts metav1.ListOptions) (*v1.ListenerConfigList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ListenerConfig, err error)
}

type ListenerConfigCache interface {
	Get(namespace, name string) (*v1.ListenerConfig, error)
	List(namespace string, selector labels.Selector) ([]*v1.ListenerConfig, error)

	AddIndexer(indexName string, indexer ListenerConfigIndexer)
	GetByIndex(indexName, key string) ([]*v1.ListenerConfig, error)
}

type ListenerConfigIndexer func(obj *v1.ListenerConfig) ([]string, error)

type listenerConfigController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.ListenerConfigsGetter
	informer          informers.ListenerConfigInformer
	gvk               schema.GroupVersionKind
}

func NewListenerConfigController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.ListenerConfigsGetter, informer informers.ListenerConfigInformer) ListenerConfigController {
	return &listenerConfigController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromListenerConfigHandlerToHandler(sync ListenerConfigHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.ListenerConfig
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.ListenerConfig))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *listenerConfigController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.ListenerConfig))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateListenerConfigOnChange(updater generic.Updater, handler ListenerConfigHandler) ListenerConfigHandler {
	return func(key string, obj *v1.ListenerConfig) (*v1.ListenerConfig, error) {
		if obj == nil {
			return handler(key, nil)
		}

		copyObj := obj.DeepCopy()
		newObj, err := handler(key, copyObj)
		if newObj != nil {
			copyObj = newObj
		}
		if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
			newObj, err := updater(copyObj)
			if newObj != nil && err == nil {
				copyObj = newObj.(*v1.ListenerConfig)
			}
		}

		return copyObj, err
	}
}

func (c *listenerConfigController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *listenerConfigController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *listenerConfigController) OnChange(ctx context.Context, name string, sync ListenerConfigHandler) {
	c.AddGenericHandler(ctx, name, FromListenerConfigHandlerToHandler(sync))
}

func (c *listenerConfigController) OnRemove(ctx context.Context, name string, sync ListenerConfigHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromListenerConfigHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *listenerConfigController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *listenerConfigController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *listenerConfigController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *listenerConfigController) Cache() ListenerConfigCache {
	return &listenerConfigCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *listenerConfigController) Create(obj *v1.ListenerConfig) (*v1.ListenerConfig, error) {
	return c.clientGetter.ListenerConfigs(obj.Namespace).Create(obj)
}

func (c *listenerConfigController) Update(obj *v1.ListenerConfig) (*v1.ListenerConfig, error) {
	return c.clientGetter.ListenerConfigs(obj.Namespace).Update(obj)
}

func (c *listenerConfigController) UpdateStatus(obj *v1.ListenerConfig) (*v1.ListenerConfig, error) {
	return c.clientGetter.ListenerConfigs(obj.Namespace).UpdateStatus(obj)
}

func (c *listenerConfigController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.ListenerConfigs(namespace).Delete(name, options)
}

func (c *listenerConfigController) Get(namespace, name string, options metav1.GetOptions) (*v1.ListenerConfig, error) {
	return c.clientGetter.ListenerConfigs(namespace).Get(name, options)
}

func (c *listenerConfigController) List(namespace string, opts metav1.ListOptions) (*v1.ListenerConfigList, error) {
	return c.clientGetter.ListenerConfigs(namespace).List(opts)
}

func (c *listenerConfigController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.ListenerConfigs(namespace).Watch(opts)
}

func (c *listenerConfigController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ListenerConfig, err error) {
	return c.clientGetter.ListenerConfigs(namespace).Patch(name, pt, data, subresources...)
}

type listenerConfigCache struct {
	lister  listers.ListenerConfigLister
	indexer cache.Indexer
}

func (c *listenerConfigCache) Get(namespace, name string) (*v1.ListenerConfig, error) {
	return c.lister.ListenerConfigs(namespace).Get(name)
}

func (c *listenerConfigCache) List(namespace string, selector labels.Selector) ([]*v1.ListenerConfig, error) {
	return c.lister.ListenerConfigs(namespace).List(selector)
}

func (c *listenerConfigCache) AddIndexer(indexName string, indexer ListenerConfigIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.ListenerConfig))
		},
	}))
}

func (c *listenerConfigCache) GetByIndex(indexName, key string) (result []*v1.ListenerConfig, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.ListenerConfig))
	}
	return result, nil
}
