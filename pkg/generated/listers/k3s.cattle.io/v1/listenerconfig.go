/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/k3s/pkg/apis/k3s.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ListenerConfigLister helps list ListenerConfigs.
type ListenerConfigLister interface {
	// List lists all ListenerConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.ListenerConfig, err error)
	// ListenerConfigs returns an object that can list and get ListenerConfigs.
	ListenerConfigs(namespace string) ListenerConfigNamespaceLister
	ListenerConfigListerExpansion
}

// listenerConfigLister implements the ListenerConfigLister interface.
type listenerConfigLister struct {
	indexer cache.Indexer
}

// NewListenerConfigLister returns a new ListenerConfigLister.
func NewListenerConfigLister(indexer cache.Indexer) ListenerConfigLister {
	return &listenerConfigLister{indexer: indexer}
}

// List lists all ListenerConfigs in the indexer.
func (s *listenerConfigLister) List(selector labels.Selector) (ret []*v1.ListenerConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ListenerConfig))
	})
	return ret, err
}

// ListenerConfigs returns an object that can list and get ListenerConfigs.
func (s *listenerConfigLister) ListenerConfigs(namespace string) ListenerConfigNamespaceLister {
	return listenerConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ListenerConfigNamespaceLister helps list and get ListenerConfigs.
type ListenerConfigNamespaceLister interface {
	// List lists all ListenerConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ListenerConfig, err error)
	// Get retrieves the ListenerConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.ListenerConfig, error)
	ListenerConfigNamespaceListerExpansion
}

// listenerConfigNamespaceLister implements the ListenerConfigNamespaceLister
// interface.
type listenerConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ListenerConfigs in the indexer for a given namespace.
func (s listenerConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.ListenerConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ListenerConfig))
	})
	return ret, err
}

// Get retrieves the ListenerConfig from the indexer for a given namespace and name.
func (s listenerConfigNamespaceLister) Get(name string) (*v1.ListenerConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("listenerconfig"), name)
	}
	return obj.(*v1.ListenerConfig), nil
}
